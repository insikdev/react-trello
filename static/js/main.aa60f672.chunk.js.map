{"version":3,"sources":["image/bg.jpg","styles/GlobalStyle.tsx","atom.ts","components/Button.tsx","components/AddList.tsx","components/Card.tsx","components/Board.tsx","App.tsx","index.tsx","styles/theme.ts"],"names":["GlobalStyle","styled","reset","background","board_item","atom","key","default","board_order","Btn","button","props","theme","btnBackground","Button","text","type","Header","header","boardBackground","Label","label","Form","form","Input","input","AddList","useForm","register","handleSubmit","setValue","setBoardOrder","useSetRecoilState","setBoardItem","onSubmit","title","prev","htmlFor","id","placeholder","List","li","Card","data","index","draggableId","p","s","ref","innerRef","dragHandleProps","draggableProps","React","memo","Container","section","TitleText","div","boardTitle","TextArea","textarea","Board","useState","isOpen","setIsOpen","useRecoilState","boardItem","new_arr","Date","now","toString","push","magic","direction","droppableId","droppableProps","map","onClick","Main","main","App","boardOrder","onDragEnd","source","destination","new_state","splice","temp","start","end","first_arr","second_arr","item","ReactDOM","render","StrictMode","textColor","document","getElementById"],"mappings":"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","file":"static/js/main.aa60f672.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.cc6ec535.jpg\";","import * as styled from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\nimport background from \"../image/bg.jpg\";\r\n\r\nconst GlobalStyle = styled.createGlobalStyle`\r\n  ${reset}\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    background-image: url(${background});\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { atom } from \"recoil\";\r\n\r\nexport interface IBoardItem {\r\n  id: string;\r\n  text: string;\r\n}\r\n\r\ninterface IBoard {\r\n  [key: string]: IBoardItem[];\r\n}\r\n\r\nexport const board_item = atom<IBoard>({\r\n  key: \"boardList\",\r\n  default: {},\r\n});\r\n\r\nexport const board_order = atom<string[]>({\r\n  key: \"order\",\r\n  default: [],\r\n});\r\n","import styled from \"styled-components\";\r\n\r\ninterface IProps {\r\n  text: string;\r\n}\r\n\r\nconst Btn = styled.button`\r\n  border-radius: 4px;\r\n  width: max-content;\r\n  border: none;\r\n  background-color: ${(props) => props.theme.btnBackground};\r\n  padding: 6px 12px;\r\n  color: white;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Button = ({ text }: IProps) => <Btn type=\"submit\">{text}</Btn>;\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { board_item, board_order } from \"../atom\";\r\nimport Button from \"./Button\";\r\n\r\ninterface IForm {\r\n  title: string;\r\n}\r\n\r\nconst Header = styled.header`\r\n  width: 270px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  background-color: ${(props) => props.theme.boardBackground};\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border-radius: 4px;\r\n  margin: 10px 0px;\r\n  border: none;\r\n  padding: 8px 10px;\r\n  font-size: 16px;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &::placeholder {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst AddList = () => {\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const setBoardOrder = useSetRecoilState(board_order);\r\n  const setBoardItem = useSetRecoilState(board_item);\r\n\r\n  const onSubmit = handleSubmit(({ title }) => {\r\n    if (title === \"\") return;\r\n    setValue(\"title\", \"\");\r\n    setBoardOrder((prev) => [...prev, title]);\r\n    setBoardItem((prev) => ({ ...prev, [title]: [] }));\r\n  });\r\n\r\n  return (\r\n    <Header>\r\n      <Label htmlFor=\"title\">Add another list</Label>\r\n      <Form onSubmit={onSubmit}>\r\n        <Input\r\n          id=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Enter list title...\"\r\n          {...register(\"title\")}\r\n        />\r\n        <Button text=\"Add\" />\r\n      </Form>\r\n    </Header>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport { IBoardItem } from \"../atom\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  data: IBoardItem;\r\n}\r\n\r\nconst List = styled.li`\r\n  width: 100%;\r\n  background-color: white;\r\n  margin-bottom: 12px;\r\n  padding: 8px 10px;\r\n  border-radius: 4px;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst Card = ({ data, index }: IProps) => (\r\n  <Draggable draggableId={data.id} index={index} key={data.id}>\r\n    {(p, s) => (\r\n      <List ref={p.innerRef} {...p.dragHandleProps} {...p.draggableProps}>\r\n        <span>{data.text}</span>\r\n      </List>\r\n    )}\r\n  </Draggable>\r\n);\r\n\r\nexport default React.memo(Card);\r\n","import React, { useState } from \"react\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { board_item, IBoardItem } from \"../atom\";\r\nimport Button from \"./Button\";\r\nimport Card from \"./Card\";\r\n\r\ninterface IForm {\r\n  text: string;\r\n}\r\n\r\ninterface IProps {\r\n  title: string;\r\n  index: number;\r\n}\r\n\r\nconst Container = styled.section`\r\n  width: 100%;\r\n  background-color: ${(props) => props.theme.boardBackground};\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  height: min-content;\r\n`;\r\n\r\nconst TitleText = styled.div`\r\n  color: ${(props) => props.theme.boardTitle};\r\n  padding: 5px;\r\n  font-weight: bold;\r\n  margin-bottom: 6px;\r\n`;\r\n\r\nconst Btn = styled.button`\r\n  width: 100%;\r\n  padding: 6px 0px;\r\n  border: none;\r\n  background-color: transparent;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  transition: all 0.1s ease-in;\r\n  &:hover {\r\n    background: rgba(92, 93, 94, 0.1);\r\n    cursor: pointer;\r\n  }\r\n  color: #636e72;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  resize: none;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: none;\r\n  outline: none;\r\n  padding: 8px;\r\n  height: 54px;\r\n  overflow-wrap: break-word;\r\n  margin-bottom: 10px;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n`;\r\n\r\nconst Board = ({ title, index }: IProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const [boardItem, setBoardItem] = useRecoilState(board_item);\r\n\r\n  const onSubmit = handleSubmit(({ text }) => {\r\n    if (text === \"\") return;\r\n\r\n    const new_arr = [...boardItem[title]];\r\n    const id = Date.now().toString();\r\n    new_arr.push({ id, text });\r\n    setBoardItem((prev) => ({ ...prev, [title]: new_arr }));\r\n    setValue(\"text\", \"\");\r\n  });\r\n\r\n  return (\r\n    <Draggable draggableId={title} index={index} key={title}>\r\n      {(magic) => (\r\n        <Container\r\n          ref={magic.innerRef}\r\n          {...magic.draggableProps}\r\n          {...magic.dragHandleProps}\r\n        >\r\n          <TitleText> {title}</TitleText>\r\n          <Droppable direction=\"vertical\" droppableId={title} type=\"card\">\r\n            {(p) => (\r\n              <ul ref={p.innerRef} {...p.droppableProps}>\r\n                {boardItem[title].map((data: IBoardItem, index) => (\r\n                  <Card key={index} data={data} index={index} />\r\n                ))}\r\n                {p.placeholder}\r\n              </ul>\r\n            )}\r\n          </Droppable>\r\n          {isOpen ? (\r\n            <Form onSubmit={onSubmit}>\r\n              <TextArea\r\n                placeholder=\"Enter a title for this card...\"\r\n                {...register(\"text\")}\r\n              />\r\n              <Button text=\"Add card\" />\r\n            </Form>\r\n          ) : (\r\n            <Btn onClick={() => setIsOpen(true)}>+ Add a card</Btn>\r\n          )}\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Board);\r\n","import styled from \"styled-components\";\nimport GlobalStyle from \"./styles/GlobalStyle\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport AddList from \"./components/AddList\";\nimport { useRecoilState } from \"recoil\";\nimport { board_item, board_order } from \"./atom\";\nimport Board from \"./components/Board\";\n\nconst Main = styled.main`\n  display: grid;\n  grid-template-columns: repeat(10, 270px);\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nfunction App() {\n  const [boardOrder, setBoardOrder] = useRecoilState(board_order);\n  const [boardItem, setBoardItem] = useRecoilState(board_item);\n\n  const onDragEnd = ({\n    type,\n    draggableId,\n    source,\n    destination,\n  }: DropResult) => {\n    if (!destination || !source) return;\n\n    if (type === \"board\") {\n      setBoardOrder((prev) => {\n        const new_state = [...prev];\n        const [temp] = new_state.splice(source.index, 1);\n        new_state.splice(destination?.index, 0, temp);\n        return new_state;\n      });\n    } else if (type === \"card\") {\n      if (source.droppableId === destination.droppableId) {\n        const start = source.index;\n        const end = destination.index;\n        const new_arr = [...boardItem[source.droppableId]];\n        const [temp] = new_arr.splice(start, 1);\n        new_arr.splice(end, 0, temp);\n        setBoardItem((prev) => ({ ...prev, [source.droppableId]: new_arr }));\n      } else {\n        const first_arr = [...boardItem[source.droppableId]];\n        const second_arr = [...boardItem[destination.droppableId]];\n        const [temp] = first_arr.splice(source.index, 1);\n        second_arr.splice(destination.index, 0, temp);\n        setBoardItem((prev) => ({\n          ...prev,\n          [source.droppableId]: first_arr,\n          [destination.droppableId]: second_arr,\n        }));\n      }\n    }\n  };\n  return (\n    <>\n      <GlobalStyle />\n      <AddList />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"board\" type=\"board\" direction=\"horizontal\">\n          {(p) => (\n            <Main ref={p.innerRef} {...p.droppableProps}>\n              {boardOrder.map((item, index) => (\n                <Board title={item} key={index} index={index} />\n              ))}\n              {p.placeholder}\n            </Main>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { lightTheme } from \"./styles/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={lightTheme}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  textColor: \"black\",\r\n  boardBackground: \"#EBECF0\",\r\n  btnBackground: \"#0079bf\",\r\n  boardTitle: \"#172b4d\",\r\n};\r\n"],"sourceRoot":""}