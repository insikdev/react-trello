{"version":3,"sources":["image/bg.jpg","styles/GlobalStyle.tsx","atom.ts","components/Button.tsx","components/AddList.tsx","components/Card.tsx","components/Board.tsx","App.tsx","index.tsx","styles/theme.ts"],"names":["GlobalStyle","styled","reset","background","recoil_board","atom","key","default","board","localStorage","getItem","JSON","parse","loadBoard","Btn","button","props","theme","btnBackground","Button","text","type","Header","header","boardBackground","Label","label","Form","form","Input","input","AddList","useForm","register","handleSubmit","setValue","useRecoilState","setBoard","onSubmit","title","Object","keys","indexOf","prev","htmlFor","id","placeholder","List","div","Card","data","index","draggableId","p","ref","innerRef","dragHandleProps","draggableProps","React","memo","Container","section","TitleText","h2","boardTitle","TextArea","textarea","Ul","ul","isDraggingOver","CancleBtn","Board","useState","isOpen","setIsOpen","new_arr","Date","now","toString","push","MouseDown","target","nodeName","useEffect","document","body","addEventListener","e","removeEventListener","magic","slice","direction","droppableId","s","droppableProps","map","className","style","display","alignItems","onClick","Main","main","TrashBox","Trash","App","item","setItem","stringify","onDragEnd","source","destination","new_board","entries","splice","temp","reduce","acc","value","first_arr","second_arr","new_item","icon","faTrash","size","color","ReactDOM","render","StrictMode","textColor","getElementById"],"mappings":"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","file":"static/js/main.b4667667.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.cc6ec535.jpg\";","import * as styled from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\nimport background from \"../image/bg.jpg\";\r\n\r\nconst GlobalStyle = styled.createGlobalStyle`\r\n  ${reset}\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    background-image: url(${background});\r\n  }\r\n  #root {\r\n    overflow-x: auto;\r\n    height: 100vh;\r\n    padding: 20px;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { atom } from \"recoil\";\r\n\r\nexport const saveBoard = (item: IBoard) =>\r\n  localStorage.setItem(\"BOARD\", JSON.stringify(item));\r\n\r\nexport const loadBoard = (): IBoard | null => {\r\n  const board = localStorage.getItem(\"BOARD\");\r\n  if (board) return JSON.parse(board);\r\n  return null;\r\n};\r\n\r\nexport interface IBoardItem {\r\n  id: string;\r\n  text: string;\r\n}\r\n\r\ninterface IBoard {\r\n  [key: string]: IBoardItem[];\r\n}\r\n\r\nexport const recoil_board = atom<IBoard>({\r\n  key: \"board\",\r\n  default: loadBoard() ?? {},\r\n});\r\n","import styled from \"styled-components\";\r\n\r\ninterface IProps {\r\n  text: string;\r\n}\r\n\r\nconst Btn = styled.button`\r\n  border-radius: 4px;\r\n  width: max-content;\r\n  border: none;\r\n  background-color: ${(props) => props.theme.btnBackground};\r\n  padding: 6px 12px;\r\n  color: white;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Button = ({ text }: IProps) => <Btn type=\"submit\">{text}</Btn>;\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { recoil_board } from \"../atom\";\r\nimport Button from \"./Button\";\r\n\r\ninterface IForm {\r\n  title: string;\r\n}\r\n\r\nconst Header = styled.header`\r\n  width: 270px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  background-color: ${(props) => props.theme.boardBackground};\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border-radius: 4px;\r\n  margin: 10px 0px;\r\n  border: none;\r\n  padding: 8px 10px;\r\n  font-size: 16px;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &::placeholder {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nconst AddList = () => {\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const [board, setBoard] = useRecoilState(recoil_board);\r\n\r\n  const onSubmit = handleSubmit(({ title }) => {\r\n    if (title === \"\") return;\r\n    setValue(\"title\", \"\");\r\n    if (Object.keys(board).indexOf(title) !== -1) return;\r\n    setBoard((prev) => ({ ...prev, [title + \".\"]: [] }));\r\n  });\r\n\r\n  return (\r\n    <Header>\r\n      <Label htmlFor=\"title\">Add another list</Label>\r\n      <Form onSubmit={onSubmit}>\r\n        <Input\r\n          id=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Enter list title...\"\r\n          {...register(\"title\")}\r\n        />\r\n        <Button text=\"Add\" />\r\n      </Form>\r\n    </Header>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\nimport { IBoardItem } from \"../atom\";\r\n\r\ninterface IProps {\r\n  index: number;\r\n  data: IBoardItem;\r\n}\r\n\r\nconst List = styled.div`\r\n  width: 100%;\r\n  background-color: #ffffff;\r\n  margin-bottom: 12px;\r\n  padding: 8px 10px;\r\n  border-radius: 4px;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst Card = ({ data, index }: IProps) => (\r\n  <li>\r\n    <Draggable draggableId={data.id} index={index} key={data.id}>\r\n      {(p) => (\r\n        <List ref={p.innerRef} {...p.dragHandleProps} {...p.draggableProps}>\r\n          <span>{data.text}</span>\r\n        </List>\r\n      )}\r\n    </Draggable>\r\n  </li>\r\n);\r\n\r\nexport default React.memo(Card);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { recoil_board, IBoardItem } from \"../atom\";\r\nimport Button from \"./Button\";\r\nimport Card from \"./Card\";\r\n\r\ninterface IForm {\r\n  text: string;\r\n}\r\n\r\ninterface IProps {\r\n  title: string;\r\n  index: number;\r\n}\r\n\r\nconst Container = styled.section`\r\n  width: 270px;\r\n  background-color: ${(props) => props.theme.boardBackground};\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n  height: min-content;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst TitleText = styled.h2`\r\n  color: ${(props) => props.theme.boardTitle};\r\n  padding: 5px;\r\n  font-weight: bold;\r\n  margin-bottom: 6px;\r\n`;\r\n\r\nconst Btn = styled.button`\r\n  width: 100%;\r\n  padding: 6px 0px;\r\n  border: none;\r\n  background-color: transparent;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  transition: all 0.1s ease-in;\r\n  &:hover {\r\n    background: rgba(92, 93, 94, 0.1);\r\n    cursor: pointer;\r\n  }\r\n  color: #636e72;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  resize: none;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: none;\r\n  outline: none;\r\n  padding: 8px;\r\n  height: 54px;\r\n  overflow-wrap: break-word;\r\n  margin-bottom: 10px;\r\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px,\r\n    rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\r\n`;\r\n\r\nconst Ul = styled.ul<{ isDraggingOver: boolean }>`\r\n  min-height: 5px;\r\n  li {\r\n    background-color: #636e72;\r\n    border-radius: 4px;\r\n  }\r\n  li.placeholder {\r\n    height: ${(props) => (props.isDraggingOver ? \"auto\" : 0)};\r\n  }\r\n`;\r\n\r\nconst CancleBtn = styled.button`\r\n  border: none;\r\n  font-size: 18px;\r\n  margin-left: 6px;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Board = ({ title, index }: IProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const [board, setBoard] = useRecoilState(recoil_board);\r\n\r\n  const onSubmit = handleSubmit(({ text }) => {\r\n    if (text === \"\") return;\r\n\r\n    const new_arr = [...board[title]];\r\n    const id = Date.now().toString();\r\n    new_arr.push({ id, text });\r\n    setBoard((prev) => ({ ...prev, [title]: new_arr }));\r\n    setValue(\"text\", \"\");\r\n  });\r\n\r\n  const MouseDown = ({ target: { nodeName, id } }: any) => {\r\n    if (id === \"root\" || nodeName === \"H2\") setIsOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener(\"mousedown\", (e) => MouseDown(e));\r\n    return () => document.body.removeEventListener(\"mousedown\", MouseDown);\r\n  }, []);\r\n\r\n  return (\r\n    <Draggable draggableId={title} index={index} key={title}>\r\n      {(magic) => (\r\n        <Container ref={magic.innerRef} {...magic.draggableProps}>\r\n          <TitleText {...magic.dragHandleProps}>{title.slice(0, -1)}</TitleText>\r\n          <Droppable direction=\"vertical\" droppableId={title} type=\"card\">\r\n            {(p, s) => (\r\n              <Ul\r\n                ref={p.innerRef}\r\n                {...p.droppableProps}\r\n                isDraggingOver={s.isDraggingOver}\r\n              >\r\n                {board[title].map((data: IBoardItem, index) => (\r\n                  <Card key={index} data={data} index={index} />\r\n                ))}\r\n                <li className=\"placeholder\">{p.placeholder}</li>\r\n              </Ul>\r\n            )}\r\n          </Droppable>\r\n          {isOpen ? (\r\n            <Form onSubmit={onSubmit}>\r\n              <TextArea\r\n                placeholder=\"Enter a title for this card...\"\r\n                {...register(\"text\")}\r\n              />\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Button text=\"Add card\" />\r\n                <CancleBtn type=\"button\" onClick={() => setIsOpen(false)}>\r\n                  ✖\r\n                </CancleBtn>\r\n              </div>\r\n            </Form>\r\n          ) : (\r\n            <Btn onClick={() => setIsOpen(true)}>+ Add a card</Btn>\r\n          )}\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Board);\r\n","import styled from \"styled-components\";\nimport GlobalStyle from \"./styles/GlobalStyle\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport AddList from \"./components/AddList\";\nimport { useRecoilState } from \"recoil\";\nimport { recoil_board, saveBoard } from \"./atom\";\nimport Board from \"./components/Board\";\nimport { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Main = styled.main`\n  width: min-content;\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 50px;\n`;\n\nconst TrashBox = styled.section`\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  &:hover {\n    transform: scale(1.3);\n    svg {\n      color: red;\n    }\n  }\n`;\n\nconst Trash = styled.div`\n  width: 50px;\n  height: 100px;\n`;\n\nfunction App() {\n  const [board, setBoard] = useRecoilState(recoil_board);\n\n  const onDragEnd = (data: DropResult) => {\n    const { source, destination, type } = data;\n\n    if (!destination || !source) return;\n\n    if (destination.droppableId === \"trash-card\") {\n      setBoard((prev) => {\n        const new_item = [...board[source.droppableId]];\n        new_item.splice(source.index, 1);\n        return { ...prev, [source.droppableId]: new_item };\n      });\n      return;\n    } else if (destination.droppableId === \"trash-board\") {\n      setBoard((prev) => {\n        const new_board = { ...prev };\n        delete new_board[data.draggableId];\n        return new_board;\n      });\n      return;\n    }\n\n    if (type === \"board\") {\n      setBoard((prev) => {\n        const new_board = Object.entries(prev);\n        const [temp] = new_board.splice(source.index, 1);\n        new_board.splice(destination.index, 0, temp);\n        return new_board.reduce(\n          (acc, [key, value]) => ({\n            ...acc,\n            [key]: value,\n          }),\n          {}\n        );\n      });\n    } else if (type === \"card\") {\n      if (source.droppableId === destination.droppableId) {\n        const new_arr = [...board[source.droppableId]];\n        const [temp] = new_arr.splice(source.index, 1);\n        new_arr.splice(destination.index, 0, temp);\n        setBoard((prev) => ({ ...prev, [source.droppableId]: new_arr }));\n      } else {\n        const first_arr = [...board[source.droppableId]];\n        const second_arr = [...board[destination.droppableId]];\n        const [temp] = first_arr.splice(source.index, 1);\n        second_arr.splice(destination.index, 0, temp);\n        setBoard((prev) => ({\n          ...prev,\n          [source.droppableId]: first_arr,\n          [destination.droppableId]: second_arr,\n        }));\n      }\n    }\n  };\n\n  useEffect(() => {\n    saveBoard(board);\n  }, [board]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <AddList />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"board\" direction=\"horizontal\" type=\"board\">\n          {(p) => (\n            <Main ref={p.innerRef} {...p.droppableProps}>\n              {Object.keys(board).map((item, index) => (\n                <Board title={item} key={index} index={index} />\n              ))}\n              {p.placeholder}\n            </Main>\n          )}\n        </Droppable>\n        <TrashBox>\n          <Droppable droppableId=\"trash-card\" type=\"card\">\n            {(p) => (\n              <Trash ref={p.innerRef} {...p.droppableProps}>\n                {p.placeholder}\n              </Trash>\n            )}\n          </Droppable>\n\n          <FontAwesomeIcon icon={faTrash} size={\"2x\"} color={\"white\"} />\n\n          <Droppable droppableId=\"trash-board\" type=\"board\">\n            {(p) => (\n              <Trash ref={p.innerRef} {...p.droppableProps}>\n                {p.placeholder}\n              </Trash>\n            )}\n          </Droppable>\n        </TrashBox>\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { lightTheme } from \"./styles/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={lightTheme}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  textColor: \"black\",\r\n  boardBackground: \"#EBECF0\",\r\n  btnBackground: \"#0079bf\",\r\n  boardTitle: \"#172b4d\",\r\n};\r\n"],"sourceRoot":""}